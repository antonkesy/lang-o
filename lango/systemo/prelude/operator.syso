-- Operator precedence declarations
infixl 6 +;
infixl 6 -;
infixl 7 *;
infixl 7 /;
infixr 8 **;
infixr 8 ^^;
infixr 8 ^;
infix  4 ==;
infix  4 /=;
infix  4 <;
infix  4 <=;
infix  4 >;
infix  4 >=;
infixr 3 &&;
infixr 2 ||;
infixr 5 ++;
infixr 5 :;

-- Basic arithmetic operators
inst (+) :: Int -> Int -> Int {
  (+) x y = primIntAdd x y;
};

inst (+) :: Float -> Float -> Float {
  (+) x y = primFloatAdd x y;
};

inst (-) :: Int -> Int -> Int {
  (-) x y = primIntSub x y;
};

inst (-) :: Float -> Float -> Float {
  (-) x y = primFloatSub x y;
};

inst (*) :: Int -> Int -> Int {
  (*) x y = primIntMul x y;
};

inst (*) :: Float -> Float -> Float {
  (*) x y = primFloatMul x y;
};

inst (/) :: Float -> Float -> Float {
  (/) x y = primFloatDiv x y;
};

-- Unary minus operators
inst (-) :: Int -> Int {
  (-) x = primIntNeg x;
};

inst (-) :: Float -> Float {
  (-) x = primFloatNeg x;
};

inst (<) :: Int -> Int -> Bool {
  (<) x y = primIntLt x y;
};

inst (<) :: Float -> Float -> Bool {
  (<) x y = primFloatLt x y;
};

inst (<=) :: Int -> Int -> Bool {
  (<=) x y = primIntLe x y;
};

inst (<=) :: Float -> Float -> Bool {
  (<=) x y = primFloatLe x y;
};

inst (>) :: Int -> Int -> Bool {
  (>) x y = primIntGt x y;
};

inst (>) :: Float -> Float -> Bool {
  (>) x y = primFloatGt x y;
};

inst (>=) :: Int -> Int -> Bool {
  (>=) x y = primIntGe x y;
};

inst (>=) :: Float -> Float -> Bool {
  (>=) x y = primFloatGe x y;
};

inst (==) :: Int -> Int -> Bool {
  (==) x y = primIntEq x y;
};

inst (==) :: Float -> Float -> Bool {
  (==) x y = primFloatEq x y;
};

inst (==) :: Bool -> Bool -> Bool {
  (==) x y = primBoolEq x y;
};

inst (/=) :: Int -> Int -> Bool {
  (/=) x y = primIntNe x y;
};

inst (/=) :: Float -> Float -> Bool {
  (/=) x y = primFloatNe x y;
};

inst (/=) :: Bool -> Bool -> Bool {
  (/=) x y = primBoolNe x y;
};

inst (&&) :: Bool -> Bool -> Bool {
  (&&) x y = primBoolAnd x y;
};

inst (||) :: Bool -> Bool -> Bool {
  (||) x y = primBoolOr x y;
};

inst (++) :: String -> String -> String {
  (++) x y = primStringConcat x y;
};

inst (++) :: [a] -> [a] -> [a] {
  (++) x y = primListConcat x y;
};
