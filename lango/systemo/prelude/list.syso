length [] = 0;
length (x:xs) = 1 + length xs;

elem x []     = False;
elem y (x:xs) =
    if y == x
        then True
        else elem y xs;

tail [] = error "empty list";
tail (x:xs) = xs;

map x [] = [];
map f (x:xs) = [f x] ++ map f xs;

inst (/=) :: [a] -> [a] -> Bool {
  (/=) x y = not (x == y);
};

inst (++) :: [a] -> [a] -> [a] {
  (++) x y = primListConcat x y;
};

inst (==) :: [a] -> [a] -> Bool {
  (==) x y = listEq x y;
};

listEq [] [] = True;
listEq (x:xs) (y:ys) = x == y && listEq xs ys;

inst (!!) :: [a] -> Int -> a {
  (!!) [] n = error "index too large";
  (!!) (x:xs) 0 = x;
  (!!) (x:xs) n = if n < 0 then error "negative index" else xs !! (n - 1);
};
