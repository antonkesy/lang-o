start: prelude stmt* postlude

prelude: COMMENT*
postlude: COMMENT*

?stmt: data_decl
     | inst_decl
     | func_def

// --- Data Declarations ---
data_decl: "data" TYPE type_param* "=" constructor ("|" constructor)* ";"

type_param: ID

constructor: UIDENT record_constructor
           | UIDENT type_atom*

record_constructor: "{" [field ("," field)*] "}"
field: ID "::" type_expr

// --- Instance Declarations ---
inst_decl: "inst" operator_name "::" type_expr "{" func_def "}" ";"

// --- Function Signatures and Definitions ---

operator_name: ID
             | "(" symbolic_operator ")"

symbolic_operator: QMARK
                  | PLUS
                  | DOUBLE_PLUS
                  | MINUS
                  | MUL
                  | DOUBLE_MUL
                  | DIV
                  | CARET
                  | DOUBLE_CARET
                  | EQ
                  | NEQ
                  | LT
                  | LTEQ
                  | GT
                  | GTEQ
                  | AND
                  | OR
                  | COLON
                  | AT

func_def: operator_name pattern* "=" expr ";"

do_stmt: "let" "{" (ID "=" expr ";")* ID "=" expr "}"
        | expr

stmt_list: (do_stmt ";")+

?expr: "do" "{" stmt_list "}"          -> do_block
     | "if" expr "then" expr "else" expr -> if_else
     | infix_expr

// Generic infix expression with any symbolic operator
?infix_expr: infix_expr "+" prefix_expr -> infix_op_add
           | infix_expr "-" prefix_expr -> infix_op_sub
           | infix_expr "*" prefix_expr -> infix_op_mul
           | infix_expr "/" prefix_expr -> infix_op_div
           | infix_expr "^" prefix_expr -> infix_op_pow_int
           | infix_expr "^^" prefix_expr -> infix_op_pow_float
           | infix_expr "**" prefix_expr -> infix_op_pow_float
           | infix_expr "==" prefix_expr -> infix_op_eq
           | infix_expr "/=" prefix_expr -> infix_op_neq
           | infix_expr "<" prefix_expr -> infix_op_lt
           | infix_expr "<=" prefix_expr -> infix_op_lteq
           | infix_expr ">" prefix_expr -> infix_op_gt
           | infix_expr ">=" prefix_expr -> infix_op_gteq
           | infix_expr "&&" prefix_expr -> infix_op_and
           | infix_expr "||" prefix_expr -> infix_op_or
           | infix_expr "++" prefix_expr -> infix_op_concat
           | infix_expr ":" prefix_expr -> infix_op_cons
           | infix_expr "!!" prefix_expr -> infix_op_index
           | prefix_expr

// Generic prefix expression with any symbolic operator
?prefix_expr: "not" prefix_expr -> prefix_op_not
            | "-" prefix_expr -> prefix_op_neg
            | "?" prefix_expr -> prefix_op_qmark
            | postfix_expr

// Generic postfix expression with any symbolic operator
?postfix_expr: postfix_expr "@" -> postfix_op_at
             | app_expr

?app_expr: app_expr atom_expr      -> app
         | atom_expr

?atom_expr: "(" expr ")"           -> grouped
          | "(" "-" INT ")"      -> neg_int
          | "(" "-" FLOAT ")"    -> neg_float
          | constructor_expr
          | UIDENT                 -> constructor
          | operator_name          -> var
          | literal

constructor_expr: UIDENT "{" field_assign ("," field_assign)* "}"
field_assign: ID "=" expr

// --- Types ---
?type_expr: type_app
          | type_app "->" type_expr   -> arrow_type

?type_app: type_app type_atom         -> type_application
         | type_atom

?type_atom: TYPE                      -> type_constructor
          | ID                        -> type_var
          | "(" type_expr ")"         -> grouped_type

// --- Patterns ---
?pattern: constructor_pattern
        | cons_pattern
        | UIDENT                 -> constructor_pattern_bare
        | "(" symbolic_operator ")" -> symbolic_operator_pattern
        | ID
        | literal
        | "(" "-" INT ")"      -> neg_int
        | "(" "-" FLOAT ")"    -> neg_float

constructor_pattern: "(" UIDENT pattern+ ")"
cons_pattern: "(" pattern COLON pattern ")"   -> cons_pattern

// --- Literals ---
?literal: INT     -> int
        | FLOAT   -> float
        | STRING  -> string
        | "True"  -> true
        | "False" -> false
        | list

list: "[" [expr ("," expr)*] "]"

// --- Tokens ---
ID: /[a-z][a-zA-Z0-9_]*/
TYPE: /[A-Z][a-zA-Z0-9_]*/
UIDENT: TYPE
STRING: /"[^"]*"/
INT: /[0-9]+/
FLOAT: /[0-9]+\.[0-9]+/

// Symbolic operators
PLUS: "+"
DOUBLE_PLUS: "++"
MINUS: "-"
MUL: "*"
DOUBLE_MUL: "**"
DIV: "/"
CARET: "^"
DOUBLE_CARET: "^^"
EQ: "=="
NEQ: "/="
LT: "<"
LTEQ: "<="
GT: ">"
GTEQ: ">="
// Logical
AND: "&&"
OR: "||"
NOT: "not"
COLON: ":"
AT: "@"
QMARK: "?"

COMMENT: /--.*/
%ignore COMMENT
%ignore /[ \t]+/
%ignore /\n/

%import common.WS
%ignore WS
