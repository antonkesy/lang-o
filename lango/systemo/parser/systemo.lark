start: prelude stmt* postlude

prelude: COMMENT*
postlude: COMMENT*

?stmt: data_decl
     | inst_decl
     | func_def

// --- Data Declarations ---
data_decl: "data" TYPE type_param* "=" constructor ("|" constructor)* ";"

type_param: ID

constructor: UIDENT record_constructor
           | UIDENT type_atom*

record_constructor: "{" [field ("," field)*] "}"
field: ID "::" type_expr

// --- Instance Declarations ---
inst_decl: "inst" operator_name "::" type_expr "{" func_def "}" ";"

// --- Function Signatures and Definitions ---

operator_name: ID
             | "(" symbolic_operator ")"

symbolic_operator: SYMBOLIC_OP

SYMBOLIC_OP: "?"
           | "+"
           | "++"
           | "-"
           | "*"
           | "**"
           | "/"
           | "^"
           | "^^"
           | "=="
           | "/="
           | "<"
           | "<="
           | ">"
           | ">="
           | "&&"
           | "||"
           | ":"
           | "@"

func_def: operator_name pattern* "=" expr ";"

do_stmt: "let" "{" (ID "=" expr ";")* ID "=" expr "}"
        | expr

stmt_list: (do_stmt ";")+

?expr: "do" "{" stmt_list "}"          -> do_block
     | "if" expr "then" expr elsif_clauses "else" expr -> if_else_extended
     | "if" expr "then" expr "else" expr -> if_else
     | infix_expr

elsif_clauses: elsif_clause+

elsif_clause: "else" "if" expr "then" expr

// Infix expressions - any symbolic operator can be used as infix
?infix_expr: infix_expr symbolic_operator prefix_expr -> infix_op
           | prefix_expr

// Prefix expressions - any symbolic operator can be used as prefix
?prefix_expr: symbolic_operator postfix_expr -> prefix_op
            | postfix_expr

// Postfix expressions - any symbolic operator can be used as postfix
?postfix_expr: app_expr symbolic_operator -> postfix_op
             | app_expr

?app_expr: app_expr atom_expr      -> app
         | atom_expr

?atom_expr: "(" expr ")"           -> grouped
          | "(" "-" INT ")"      -> neg_int
          | "(" "-" FLOAT ")"    -> neg_float
          | constructor_expr
          | UIDENT                 -> constructor
          | operator_name          -> var
          | literal

constructor_expr: UIDENT "{" field_assign ("," field_assign)* "}"
field_assign: ID "=" expr

// --- Types ---
?type_expr: type_app
          | type_app "->" type_expr   -> arrow_type

?type_app: type_app type_atom         -> type_application
         | type_atom

?type_atom: TYPE                      -> type_constructor
          | ID                        -> type_var
          | "[" type_expr "]"         -> list_type
          | "(" type_expr ")"         -> grouped_type

// --- Patterns ---
?pattern: constructor_pattern
        | cons_pattern
        | UIDENT                 -> constructor_pattern_bare
        | "(" symbolic_operator ")" -> symbolic_operator_pattern
        | ID
        | literal
        | "(" "-" INT ")"      -> neg_int
        | "(" "-" FLOAT ")"    -> neg_float

constructor_pattern: "(" UIDENT pattern+ ")"
cons_pattern: "(" pattern COLON pattern ")"   -> cons_pattern

// --- Literals ---
?literal: INT     -> int
        | FLOAT   -> float
        | STRING  -> string
        | "True"  -> true
        | "False" -> false
        | list

list: "[" [expr ("," expr)*] "]"

// --- Tokens ---
ID: /[a-z][a-zA-Z0-9_]*/
TYPE: /[A-Z][a-zA-Z0-9_]*/
UIDENT: TYPE
STRING: /"[^"]*"/
INT: /[0-9]+/
FLOAT: /[0-9]+\.[0-9]+/
COLON: ":"

COMMENT: /--.*/
%ignore COMMENT
%ignore /[ \t]+/
%ignore /\n/

%import common.WS
%ignore WS
